/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

# Creazione di un nuovo bucket di Google Cloud Storage per il data landing
resource "google_storage_bucket" "landing_bucket" {
  name          = "landing-bucket-example"
  location      = "EUROPE-WEST1"  # La posizione viene impostata su Milan (EUROPE-WEST1)
  force_destroy = true            # Questa impostazione permette la rimozione automatica dei dati quando il bucket viene eliminato

  uniform_bucket_level_access = true
}

# Impostazione delle autorizzazioni per rendere il bucket pubblico
resource "google_storage_bucket_iam_member" "landing_bucket_public" {
  bucket = google_storage_bucket.landing_bucket.name
  role   = "roles/storage.objectViewer"
  member = "allUsers"  # Concede accesso di visualizzazione a tutti gli utenti
}

# [START storage_hmac_key]
# Creazione di un nuovo account di servizio
resource "google_service_account" "service_account" {
  account_id = "my-svc-acc"
}

# Creazione della chiave HMAC per il service account associato
resource "google_storage_hmac_key" "key" {
  service_account_email = google_service_account.service_account.email
}
# [END storage_hmac_key]

# [START storage_new_bucket_parent_tag]
# Creazione di un nuovo storage bucket in eu-west1 (Milan) con classe di archiviazione Coldline
resource "google_storage_bucket" "static" {
  name          = "new-bucket-${random_id.bucket_prefix.hex}"
  location      = "eu-west1"
  storage_class = "COLDLINE"

  uniform_bucket_level_access = true
}
# [END storage_new_bucket_parent_tag]

# [START storage_upload_object_tf]
# Creazione di un oggetto di testo in Cloud Storage
resource "google_storage_bucket_object" "default" {
  name         = "new-object"
  content      = "Data as string to be uploaded"
  content_type = "text/plain"
  bucket       = google_storage_bucket.static.id
}
# [END storage_upload_object_tf]

# [START storage_get_object_metadata_tf]
# Ottenimento dei metadati dell'oggetto
data "google_storage_bucket_object" "default" {
  name   = google_storage_bucket_object.default.name
  bucket = google_storage_bucket.static.id
}

output "object_metadata" {
  value = data.google_storage_bucket_object.default
}
# [END storage_get_object_metadata_tf]

# [START storage_get_bucket_metadata_tf]
# Ottenimento dei metadati del bucket
data "google_storage_bucket" "default" {
  name = google_storage_bucket.static.id
}

output "bucket_metadata" {
  value = data.google_storage_bucket.default
}
# [END storage_get_bucket_metadata_tf]
# [END storage_new_bucket_parent_tag]

# [START storage_create_pubsub_notifications_tf]
// Create a Pub/Sub notification.
resource "google_storage_notification" "notification" {
  provider       = google-beta
  bucket         = google_storage_bucket.landing_bucket.name
  payload_format = "JSON_API_V1"
  topic          = google_pubsub_topic.topic.id
  depends_on     = [google_pubsub_topic_iam_binding.binding]
}

// Enable notifications by giving the correct IAM permission to the unique service account.
data "google_storage_project_service_account" "gcs_account" {
  provider = google-beta
}

// Create a Pub/Sub topic.
resource "google_pubsub_topic_iam_binding" "binding" {
  provider = google-beta
  topic    = google_pubsub_topic.topic.id
  role     = "roles/pubsub.publisher"
  members  = ["serviceAccount:${data.google_storage_project_service_account.gcs_account.email_address}"]
}

resource "random_id" "bucket_prefix" {
  byte_length = 8
}

// Create a new storage bucket.
resource "google_storage_bucket" "bucket" {
  name                        = "${random_id.bucket_prefix.hex}-example-bucket-name"
  provider                    = google-beta
  location                    = "US"
  uniform_bucket_level_access = true
}

resource "google_pubsub_topic" "topic" {
  name     = "your_topic_name"
  provider = google-beta
}
# [END storage_create_pubsub_notifications_tf]

# Creazione di un servizio Cloud Endpoint
resource "google_endpoints_service" "my_api_service" {
  service_name    = "my-api-service-${random_id.endpoint_suffix.hex}"
  openapi_config  = file("path/to/openapi/spec.yaml")
  endpoints_config {
    endpoints {
      name     = "my-endpoint"
      aliases  = ["myapi.example.com"]
      allow_cors = true
    }
  }
}

# Definizione delle autorizzazioni per il servizio Cloud Endpoint
resource "google_endpoints_service_iam_policy" "my_api_service_policy" {
  service = google_endpoints_service.my_api_service.service_name

  policy_data = <<EOF
{
  "bindings": [
    {
      "role": "roles/endpoints.portalViewer",
      "members": [
        "user:${random_string.user_email}",
        "group:${random_string.group_name}"
      ]
    }
  ]
}
EOF
}

# Generazione di stringhe casuali per gli identificatori
# random_id.endpoint_suffix genera un suffisso casuale per il nome del servizio Cloud Endpoint.
# random_string.user_email e random_string.group_name generano nomi casuali per gli indirizzi email degli utenti e per i nomi dei gruppi,
# che vengono quindi utilizzati come membri nelle autorizzazioni del servizio Cloud Endpoint.
resource "random_id" "endpoint_suffix" {
  byte_length = 4
}

resource "random_string" "user_email" {
  length  = 10
  special = false
}

resource "random_string" "group_name" {
  length  = 8
  special = false
}
